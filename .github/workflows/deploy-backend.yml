name: Deploy Backend

on:
  push:
    branches:
      - main
      - backend/** # You can specify a branch specifically for the backend if needed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js with the specified version
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20 # Make sure this matches the version in your `package.json`

      # Step 3: Set up pnpm with the required version
      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.12.1 # Use the correct version of pnpm (your project requires 9.12.1)

      # Step 4: Install dependencies using pnpm (for backend only)
      - name: Install dependencies
        working-directory: ./backend
        run: pnpm install # Install backend dependencies

      # Step 5: Build the project (ensure environment variables are set correctly)
      - name: Build the project
        working-directory: ./backend
        env:
          APP_ENV: ${{ secrets.APP_ENV }}
          PORT: ${{ secrets.PORT }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          JWT_REFRESH_EXPIRES_IN: ${{ secrets.JWT_REFRESH_EXPIRES_IN }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USER: ${{ secrets.MAIL_USER }}
          MAIL_SERVICE: ${{ secrets.MAIL_SERVICE }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM: ${{ secrets.MAIL_FROM }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
        run: pnpm run build # Assuming you have a build script in `package.json`

      # Step 6: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t e-garage-backend:latest .

      # Step 7: Log in to Docker Hub (or other container registry)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 8: Push Docker image to Docker Hub (or other container registry)
      - name: Push Docker image
        run: |
          docker tag e-garage-backend:latest ${{ secrets.DOCKER_USERNAME }}/e-garage-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/e-garage-backend:latest

      # Step 9: Configure Git user (if needed)
      - name: Configure Git user
        run: |
          git config --global user.email "89020751+Pubba2000Creation@users.noreply.github.com"
          git config --global user.name "prabod pubudu peiris"

      # Step 10: Commit any changes made during the build process (if needed)
      - name: Commit changes
        run: |
          git add .
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit"
          else
            git commit -m "CI/CD build and deploy"
            git push origin main
          fi

      # Step 11: Unshallow the repository (for future CI tasks)
      - name: Unshallow the repository
        run: git fetch --all --unshallow
